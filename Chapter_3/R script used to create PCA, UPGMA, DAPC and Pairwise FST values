library(vcfR)
library(adegenet)
library(ggplot2)
library(reshape2)
library(poppr)
library(ape)
library(RColorBrewer)
library(magrittr)
library(hierfstat)

setwd("C:/Users/Desktop/Bioinformatics/")
#Example of a fully filtered vcf file.
vcf <- read.vcfR("full_snps_dp8_sspc_paralog_x0.75_nobadsites_maxdp60_TR.vcf")

#Make sure that your 'population labels' are in the population_data.gbs.txt file. You need three columns with the headers 'AccessID', 'Country', 'Site' 
pop.data <- read.table("population_data.txt", sep = "\t", header = TRUE)

all(colnames(vcf@gt)[-1] == pop.data$AccessID)

gl_rubi <- vcfR2genlight(vcf)

pop(gl_rubi) <- pop.data$Site


#Create UPGMA tree
tree <- aboot(gl_rubi, tree = "upgma", distance = bitwise.dist, sample = 100, showtree = F, cutoff = 50, quiet = T)

#Show UPGMA tree with populations labelled: make sure to list the population names alphabetical below in the 'legend' line!
cols <- brewer.pal(n = nPop(gl_rubi), name = "Set3")
plot.phylo(tree, cex = 0.8, font = 2, adj = 0, tip.color =  cols[pop(gl_rubi)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.8,font = 3, xpd = TRUE)
legend('topleft', legend = c("Big Flora", "Cultivated","Hebe Island", "Hebe Island on shore", "Hebe Terrace", "Little Flora", "Little FloraSE", "New Enys", "Old Enys", "Other species", "Scotland cultivated"), fill = cols, border = FALSE, bty = "n", cex = 1)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different)")


#PCA
cols <- brewer.pal(n = nPop(gl_rubi), name = "Set3")

rubi.pca <- glPca(gl_rubi, nf = 3)
barplot(100*rubi.pca$eig/sum(rubi.pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)

title(xlab="Eigenvalues", line = 1)

rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$pop <- pop(gl_rubi)

set.seed(9)
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop)) 
p <- p + geom_point(size=2)
p <- p + stat_ellipse(level = 0.95, size = 1)
p <- p + scale_color_manual(values = cols) 
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()

p


#DAPC
maxK <- 10
myMat <- matrix(nrow=10, ncol=maxK)
colnames(myMat) <- 1:ncol(myMat)
for(i in 1:nrow(myMat)){
  grp <- find.clusters(gl_rubi, n.pca = 40, choose.n.clust = FALSE,  max.n.clust = maxK)
  myMat[i,] <- grp$Kstat
}

my_df <- melt(myMat)
colnames(my_df)[1:3] <- c("Group", "K", "BIC")
my_df$K <- as.factor(my_df$K)
head(my_df)

p1 <- ggplot(my_df, aes(x = K, y = BIC))
p1 <- p1 + geom_boxplot()
p1 <- p1 + theme_bw()
p1 <- p1 + xlab("Number of groups (K)")
p1

#This sets the range of K to run
my_k <- 2:10

grp_l <- vector(mode = "list", length = length(my_k))
dapc_l <- vector(mode = "list", length = length(my_k))

for(i in 1:length(dapc_l)){
  set.seed(9)
  grp_l[[i]] <- find.clusters(gl_rubi, n.pca = 40, n.clust = my_k[i])
  dapc_l[[i]] <- dapc(gl_rubi, pop = grp_l[[i]]$grp, n.pca = 40, n.da = my_k[i])
  #  dapc_l[[i]] <- dapc(gl_rubi, pop = grp_l[[i]]$grp, n.pca = 3, n.da = 2)
}

my_df <- as.data.frame(dapc_l[[ length(dapc_l) ]]$ind.coord)
my_df$Group <- dapc_l[[ length(dapc_l) ]]$grp
head(my_df)

#Change n here, so that it is the same as the max number of clusters
my_pal <- RColorBrewer::brewer.pal(n = 10, name = "Set3")

p2 <- ggplot(my_df, aes(x = LD1, y = LD2, color = Group, fill = Group))
p2 <- p2 + geom_point(size = 4, shape = 21)
p2 <- p2 + theme_bw()
p2 <- p2 + scale_color_manual(values=c(my_pal))
p2 <- p2 + scale_fill_manual(values=c(paste(my_pal, "66", sep = "")))
p2

tmp <- as.data.frame(dapc_l[[1]]$posterior)
tmp$K <- my_k[1]
tmp$Isolate <- rownames(tmp)
tmp <- melt(tmp, id = c("Isolate", "K"))
names(tmp)[3:4] <- c("Group", "Posterior")
tmp$Region <- pop.data$Site
my_df <- tmp

for(i in 2:length(dapc_l)){
  tmp <- as.data.frame(dapc_l[[i]]$posterior)
  tmp$K <- my_k[i]
  tmp$Isolate <- rownames(tmp)
  tmp <- melt(tmp, id = c("Isolate", "K"))
  names(tmp)[3:4] <- c("Group", "Posterior")
  tmp$Region <- pop.data$Site
  
  my_df <- rbind(my_df, tmp)
}

grp.labs <- paste("K =", my_k)
names(grp.labs) <- my_k

p3 <- ggplot(my_df, aes(x = Isolate, y = Posterior, fill = Group))
p3 <- p3 + geom_bar(stat = "identity")
p3 <- p3 + facet_grid(K ~ Region, scales = "free_x", space = "free", 
                      labeller = labeller(K = grp.labs))
p3 <- p3 + theme_bw()
p3 <- p3 + ylab("Posterior membership probability")
p3 <- p3 + theme(legend.position='none')
#p3 <- p3 + scale_color_brewer(palette="Dark2")
p3 <- p3 + scale_fill_manual(values=c(my_pal))
p3 <- p3 + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
p3

# http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/81-ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page/
library("ggpubr")
#tiff('dapc__k3_5_dapc.tiff', width=6.5, height=6.5, units='in', compression='lzw', res=300)
ggarrange(ggarrange(p1,
                    p2,
                    ncol = 2, labels = c("A", "B")),
          p3,
          nrow = 2,
          labels = c("", "C"),
          heights = c(1, 2)
)

#To calucate Fst values.

gl_data <- vcfR2genlight(vcf)
pop(gl_data) <- pop.data$Site

#Convert genlight object to genind object for Fst calculaion
x.mat <- as.matrix(gl_data) # x is a genlight object
x.mat[x.mat == 0] <- "1/1" # homozygote reference
x.mat[x.mat == 1] <- "1/2" # heterozygote
x.mat[x.mat == 2] <- "2/2" # homozygote alternate
x.gid <- df2genind(x.mat, sep = "/", pop = pop(gl_data), ploidy = 2)

#To check if number of individuals, number of populations ('groups') and their number of samples, and % of missing data is correct:
summary(x.gid)
#This just shows the number of individuals per population:
summary(x.gid$pop)

#Pairwise Fst:
Fst <- genet.dist(x.gid, method = "WC84")
Fst %>% round(digits = 4)
##Runs bootstrapping over loci of pairwise Fst. The lower limit confidence intervals (ll) and upper limit cis (ul) are then plotted:
boot_FSt <- boot.ppfst(x.gid, nboot = 100, quant = c(0.025, 0.975), diploid = TRUE)
boot_FSt$ll
boot_FSt$ul

basic.stats(x.gid,diploid=TRUE,digits=4)